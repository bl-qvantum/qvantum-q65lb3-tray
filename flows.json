[
    {
        "id": "b438688e0b293257",
        "type": "tab",
        "label": "blinky-bus-serial-tray",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "$(MQTTPORT)",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4a8c3caa0ff9b87d",
        "type": "modbus-client",
        "name": "Slave",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "$(MODBUSIP)",
        "tcpPort": "$(MODBUSPORT)",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "08ee1fafdc4c41fc",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Save tray config in Memory",
        "func": "let tray = msg.payload;\nflow.set('tray', msg.payload);\ntray.trayControl.value = 0;\nreturn {topic: 'setting', payload:{'cube':'trayControl', value:tray.trayControl.value}};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 400,
        "wires": [
            [
                "e6028ca70b6042d8"
            ]
        ]
    },
    {
        "id": "6a3a1d38244800c1",
        "type": "inject",
        "z": "b438688e0b293257",
        "name": "initFlow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "initFlow",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "33783d686e432aad"
            ]
        ]
    },
    {
        "id": "33783d686e432aad",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Init flow Variables",
        "func": "var trayProps = {\n    box         :   env.get(\"BOX\"),\n    type        :   env.get(\"TRAYTYPE\"),\n    name        :   env.get(\"TRAYNAME\"),\n};\nflow.set(\"serialBufSize\",env.get(\"SERIALBUFSIZE\"));\nflow.set('trayProps',trayProps);\nflow.set('settingInProgress', false);\nflow.set('deviceInit',false);\nflow.set('tray', null);\nreturn {topic: \"getTrayProps\", payload: true};  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "a1ac9e631b1c38ed",
                "4d6715a3cd96c25c"
            ]
        ]
    },
    {
        "id": "b15d260b572e07f4",
        "type": "json",
        "z": "b438688e0b293257",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 300,
        "wires": [
            [
                "8fe938b67af54824"
            ]
        ]
    },
    {
        "id": "ffa001cd11b3750b",
        "type": "switch",
        "z": "b438688e0b293257",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 690,
        "y": 300,
        "wires": [
            [
                "b4c6e205db41e3e1"
            ],
            [
                "4cedc086c72eda01"
            ],
            [
                "b3fee75bbe3e5d31"
            ],
            [
                "08ee1fafdc4c41fc"
            ]
        ]
    },
    {
        "id": "8fe938b67af54824",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[5], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 300,
        "wires": [
            [
                "ffa001cd11b3750b"
            ]
        ]
    },
    {
        "id": "719cafd457722095",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nlet newMsg = null;\nlet newMsgTopic = flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/reading';\nswitch( tray.trayControl.value)\n{\n    case 0:\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    case -1:\n        tray.trayControl.value = 1;\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    default:\n        break;\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 300,
        "wires": [
            [
                "81831015c91a5f28"
            ]
        ]
    },
    {
        "id": "b3fee75bbe3e5d31",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Save config file",
        "func": "let cubeAlarm = flow.get('tray')[msg.payload.cube].alarm;\nif (flow.get('tray')[msg.payload.cube].hasOwnProperty('enabled'))\n{\n    if (msg.payload.hasOwnProperty('enabled'))\n    {\n        flow.get('tray')[msg.payload.cube].enabled = msg.payload.enabled;\n    }\n}cubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\nreturn {topic:'newData', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 360,
        "wires": [
            [
                "8f466a48843f0a7f"
            ]
        ]
    },
    {
        "id": "fa4e7b3501c0222d",
        "type": "inject",
        "z": "b438688e0b293257",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "3de75371898f354c"
            ]
        ]
    },
    {
        "id": "3de75371898f354c",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Archive Pulse",
        "func": "var tray = flow.get('tray');\nif (tray == null) return null;\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= tray.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "2eb80f1e7b1fcecd"
            ]
        ]
    },
    {
        "id": "eeba3f6f8a8a9a65",
        "type": "inject",
        "z": "b438688e0b293257",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "10a1af89d539377a"
            ]
        ]
    },
    {
        "id": "10a1af89d539377a",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Single Archive Pulse",
        "func": "return {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 560,
        "wires": [
            [
                "2eb80f1e7b1fcecd"
            ]
        ]
    },
    {
        "id": "2eb80f1e7b1fcecd",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nvar newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 500,
        "wires": [
            [
                "5de5dfce91a29ad6"
            ]
        ]
    },
    {
        "id": "b4c6e205db41e3e1",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Create Setting",
        "func": "let modbusSettingMsg = null;\nlet normalSettingMsg = null;\nlet trayControlMessage = null;\nlet tray = flow.get('tray');\nif (tray == null) return [modbusMsg, normalSettingMsg, trayControlMessage];\nif (tray[msg.payload.cube].hasOwnProperty('enabled'))\n{\n    if (tray[msg.payload.cube].enabled == 0)\n    {\n        return [modbusSettingMsg, normalSettingMsg, trayControlMessage];\n    }\n}\nmodbusSettingMsg =\n{\n    topic: msg.topic,\n    payload: { value: 0, 'fc': 0x6, 'unitid': 1, 'address': -1, 'quantity': 1 }\n}\nswitch (msg.payload.cube) \n{\n    case 'startLevelCompressor':\n        modbusSettingMsg.payload.address = 20;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'stopLevelCompressor':\n        modbusSettingMsg.payload.address = 21;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'analogComp0':\n        modbusSettingMsg.payload.address = 22;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'analogComp100':\n        modbusSettingMsg.payload.address = 23;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'startLevelTillsats':\n        modbusSettingMsg.payload.address = 24;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'startTempHeatIn':\n        modbusSettingMsg.payload.address = 30;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'startTempHeatInHy':\n        modbusSettingMsg.payload.address = 31;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'startTempHotWater':\n        modbusSettingMsg.payload.address = 33;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'startTempHotWaterHy':\n        modbusSettingMsg.payload.address = 34;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'solenoidSet':\n        modbusSettingMsg.payload.address = 36;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'solenoidStop':\n        modbusSettingMsg.payload.address = 37;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'curve0C':\n        modbusSettingMsg.payload.address = 40;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'curve20C':\n        modbusSettingMsg.payload.address = 41;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'summerDownDelay':\n        modbusSettingMsg.payload.address = 45;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'summStopTemp':\n        modbusSettingMsg.payload.address = 46;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'minBegrIntro':\n        modbusSettingMsg.payload.address = 48;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'maxBegrIntro':\n        modbusSettingMsg.payload.address = 49;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'defrostBlocking':\n        modbusSettingMsg.payload.address = 51;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'defrostLoadTemp':\n        modbusSettingMsg.payload.address = 53;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'outTempBlock':\n        modbusSettingMsg.payload.address = 54;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'fanSet':\n        modbusSettingMsg.payload.address = 120;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'fanMax':\n        modbusSettingMsg.payload.address = 124;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'LB3ValveMax':\n        modbusSettingMsg.payload.address = 133;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'LB3ValveSet':\n        modbusSettingMsg.payload.address = 134;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'LB3ValveDelay':\n        modbusSettingMsg.payload.address = 136;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'defrostMaxTime':\n        modbusSettingMsg.payload.address = 202;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'extSetpoint':\n        modbusSettingMsg.payload.address = 2032;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'extOutsideTemp':\n        modbusSettingMsg.payload.address = 2033;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 10);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'externalBlocking':\n        modbusSettingMsg.payload.address = 2054;\n        modbusSettingMsg.payload.value = prepareData(msg.payload.value, 1);\n        if (modbusSettingMsg.value < 0) modbusSettingMsg = null;\n        break;\n    case 'alias':\n        tray.alias.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n        modbusSettingMsg = null;\n        break;\n    case 'trayControl':\n        switch(msg.payload.value)\n        {\n            case 0:\n                tray.trayControl.value = 0;\n                break;\n            case 1:\n                tray.trayControl.value = -1;\n                break;\n            case 2:\n                if (tray.trayControl.value > 0)\n                {\n                    tray.trayControl.value = 2;\n                    let trayProps  = flow.get('trayProps');\n                    node.warn(\"Asking for tray from database\");\n                    trayControlMessage =\n                    {\n                        topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n                        payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n                    };\n                }\n                break;\n            default:\n                tray.trayControl.value = 0;\n                break;\n        }\n        normalSettingMsg = { topic: 'newData', payload: true };\n        modbusSettingMsg = null;\n        break;\n    default:\n        break;\n}\nlet settingInProgress = false;\nif (modbusSettingMsg != null)\n{\n    settingInProgress = true;\n    tray[msg.payload.cube].enabled = 0;\n    tray[msg.payload.cube].value = msg.payload.value;\n    normalSettingMsg = { topic: 'newData', payload: true };\n}\nflow.set('settingInProgress', settingInProgress);\nreturn [modbusSettingMsg, normalSettingMsg,trayControlMessage];\n\nfunction prepareData(engVal, resolution) \n{\n    if (isNaN(engVal)) return -1;\n    let newVal = engVal;\n    newVal = Math.round(newVal * resolution);\n    if (newVal < 0) newVal = newVal + 65536;\n    if (newVal < 0) return -1;\n    if (newVal >= 65536) return -1;\n    return newVal;\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 240,
        "wires": [
            [
                "3744a97333f32473"
            ],
            [
                "71df6ca08438be25"
            ],
            [
                "6c29d83d29cb0f0b"
            ]
        ]
    },
    {
        "id": "461b2f08f5e4f4ba",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Request tray from Database",
        "func": "let tray = flow.get('tray');\nif (tray != null) return [null,null];\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for tray from database\");\nvar newMsg =\n{\n    topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n    payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n};\nreturn [{ topic: \"getTrayProps\", payload: true }, newMsg];  \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 100,
        "wires": [
            [
                "a91ceff75d960313"
            ],
            [
                "961510dc1e7a036a"
            ]
        ]
    },
    {
        "id": "a91ceff75d960313",
        "type": "delay",
        "z": "b438688e0b293257",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1120,
        "y": 100,
        "wires": [
            [
                "0d7a971d3b3d078d"
            ]
        ]
    },
    {
        "id": "0d7a971d3b3d078d",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "check for tray defined out",
        "mode": "link",
        "links": [
            "226356ea922f47c6"
        ],
        "x": 1225,
        "y": 40,
        "wires": []
    },
    {
        "id": "226356ea922f47c6",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "check for tray defined in",
        "links": [
            "0d7a971d3b3d078d"
        ],
        "x": 745,
        "y": 40,
        "wires": [
            [
                "461b2f08f5e4f4ba"
            ]
        ]
    },
    {
        "id": "81831015c91a5f28",
        "type": "mqtt out",
        "z": "b438688e0b293257",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 1470,
        "y": 300,
        "wires": []
    },
    {
        "id": "aeb11c4b0eca0c4a",
        "type": "mqtt in",
        "z": "b438688e0b293257",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 170,
        "y": 300,
        "wires": [
            [
                "b15d260b572e07f4"
            ]
        ]
    },
    {
        "id": "5de5dfce91a29ad6",
        "type": "mqtt out",
        "z": "b438688e0b293257",
        "name": "Publish Archive",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 820,
        "y": 500,
        "wires": []
    },
    {
        "id": "857e0090c2c66405",
        "type": "inject",
        "z": "b438688e0b293257",
        "name": "read Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "$(POLLINTERVAL)",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "readTable",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 760,
        "wires": [
            [
                "bfb2ae23375de0ae"
            ]
        ]
    },
    {
        "id": "6c29d83d29cb0f0b",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "trayControl Out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1075,
        "y": 280,
        "wires": []
    },
    {
        "id": "f5153c8898e1a608",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "trayControl In",
        "links": [
            "6c29d83d29cb0f0b",
            "961510dc1e7a036a"
        ],
        "x": 1325,
        "y": 360,
        "wires": [
            [
                "81831015c91a5f28"
            ]
        ]
    },
    {
        "id": "e90864c178e3c08e",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "Publish Tray In",
        "links": [
            "bd59ed153526b94a",
            "71df6ca08438be25",
            "8f466a48843f0a7f",
            "bd491678f8e24259",
            "974629da19a525ea",
            "f5d0568e288098ed",
            "184fe4c567bcfc8d"
        ],
        "x": 1175,
        "y": 300,
        "wires": [
            [
                "719cafd457722095"
            ]
        ]
    },
    {
        "id": "71df6ca08438be25",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "create normal setting out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1075,
        "y": 240,
        "wires": []
    },
    {
        "id": "8f466a48843f0a7f",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "save config out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1075,
        "y": 360,
        "wires": []
    },
    {
        "id": "bd491678f8e24259",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "ping out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1075,
        "y": 320,
        "wires": []
    },
    {
        "id": "4cedc086c72eda01",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "prep ping",
        "func": "return {topic:'newData', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 320,
        "wires": [
            [
                "bd491678f8e24259"
            ]
        ]
    },
    {
        "id": "e6028ca70b6042d8",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "save tray config out",
        "mode": "link",
        "links": [
            "21ead1f81b53e80b"
        ],
        "x": 1075,
        "y": 400,
        "wires": []
    },
    {
        "id": "21ead1f81b53e80b",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "setting switch in",
        "links": [
            "e6028ca70b6042d8"
        ],
        "x": 605,
        "y": 380,
        "wires": [
            [
                "ffa001cd11b3750b"
            ]
        ]
    },
    {
        "id": "961510dc1e7a036a",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "reload trays out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1065,
        "y": 160,
        "wires": []
    },
    {
        "id": "a1ac9e631b1c38ed",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "MQTT subscribe topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('trayProps').type +'/' + flow.get('trayProps').name + \"/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 240,
        "wires": [
            [
                "aeb11c4b0eca0c4a"
            ]
        ]
    },
    {
        "id": "4d6715a3cd96c25c",
        "type": "delay",
        "z": "b438688e0b293257",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 100,
        "wires": [
            [
                "461b2f08f5e4f4ba"
            ]
        ]
    },
    {
        "id": "99fbe8135d0ce161",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Readings Alarm Scan",
        "func": "var newData = msg.payload;\nlet tray = flow.get('tray');\nif (tray == null) return null;\nvar alarmFlagReading = scalarAlarmScan(tray, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nvar newMsg   = null;\nif (newData)\n{\n    newMsg = \n    {\n        topic: 'newData',\n        payload: true\n    }\n}\nreturn newMsg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 840,
        "wires": [
            [
                "f5d0568e288098ed"
            ]
        ]
    },
    {
        "id": "f5d0568e288098ed",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "Alarm Scan out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d",
            "e90864c178e3c08e"
        ],
        "x": 1495,
        "y": 840,
        "wires": []
    },
    {
        "id": "386db633a1f7401c",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Parse Holding 20 to 136",
        "func": "let tray = flow.get('tray');\nif (tray == null) return null;\ntray.startLevelCompressor.value     = checkData(msg.payload.data[0], 1);\ntray.stopLevelCompressor.value      = checkData(msg.payload.data[1], 1);\ntray.analogComp0.value              = checkData(msg.payload.data[2], 1);\ntray.analogComp100.value            = checkData(msg.payload.data[3], 1);\ntray.startLevelTillsats.value       = checkData(msg.payload.data[4], 1);\ntray.startTempHeatIn.value          = checkData(msg.payload.data[10], 10);\ntray.startTempHeatInHy.value        = checkData(msg.payload.data[11], 10);\ntray.startTempHotWater.value        = checkData(msg.payload.data[13], 10);\ntray.startTempHotWaterHy.value      = checkData(msg.payload.data[14], 10);\ntray.solenoidSet.value              = checkData(msg.payload.data[16], 10);\ntray.solenoidStop.value             = checkData(msg.payload.data[17], 10);\ntray.curve0C.value                  = checkData(msg.payload.data[20], 10);\ntray.curve20C.value                 = checkData(msg.payload.data[21], 10);\ntray.summerDownDelay.value          = checkData(msg.payload.data[25], 1);\ntray.summStopTemp.value             = checkData(msg.payload.data[26], 10);\ntray.minBegrIntro.value             = checkData(msg.payload.data[28], 10);\ntray.maxBegrIntro.value             = checkData(msg.payload.data[29], 10);\ntray.defrostBlocking.value          = checkData(msg.payload.data[31], 10);\ntray.defrostLoadTemp.value          = checkData(msg.payload.data[33], 10);\ntray.outTempBlock.value             = checkData(msg.payload.data[34], 10);\ntray.fanSet.value                   = checkData(msg.payload.data[100], 1);\ntray.fanMax.value                   = checkData(msg.payload.data[104], 10);\ntray.LB3ValveMax.value              = checkData(msg.payload.data[113], 10);\ntray.LB3ValveSet.value              = checkData(msg.payload.data[114], 10);\ntray.LB3ValveDelay.value            = checkData(msg.payload.data[116], 1);\n\nreturn msg;\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "abb72e8f7ab115e3"
            ]
        ]
    },
    {
        "id": "abb72e8f7ab115e3",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Setup Read Holding 202",
        "func": "var modeBusCommand = { 'fc': 0x3, 'unitid': 1, 'address': 202 , 'quantity': 1 } ;\nreturn { topic: \"h_202_202\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 680,
        "wires": [
            [
                "0820f3d0a0b2721e"
            ]
        ]
    },
    {
        "id": "1b248eea812fabd1",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Parse Holding 202",
        "func": "let tray = flow.get('tray');\nif (tray == null) return null;\ntray.defrostMaxTime.value     = checkData(msg.payload.data[0], 1);\n\nreturn msg;\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 720,
        "wires": [
            [
                "42daebaf3cb6a4e5"
            ]
        ]
    },
    {
        "id": "42daebaf3cb6a4e5",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Setup Read Holding 2032 - 2054",
        "func": "var modeBusCommand = { 'fc': 0x3, 'unitid': 1, 'address': 2032 , 'quantity': 23 } ;\nreturn { topic: \"h_2032_2054\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 720,
        "wires": [
            [
                "0820f3d0a0b2721e"
            ]
        ]
    },
    {
        "id": "ed94891d3263d8d9",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Parse Holding 2032-2054",
        "func": "let tray = flow.get('tray');\nif (tray == null) return null;\ntray.extSetpoint.value      = checkData(msg.payload.data[0],  10);\ntray.extOutsideTemp.value   = checkData(msg.payload.data[1],  10);\ntray.externalBlocking.value = checkData(msg.payload.data[22], 1);\n\nreturn msg;\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 760,
        "wires": [
            [
                "61732e8d6c809d6a"
            ]
        ]
    },
    {
        "id": "61732e8d6c809d6a",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Setup Read Input 1300-1304",
        "func": "var modeBusCommand = { 'fc': 0x4, 'unitid': 1, 'address': 1300 , 'quantity': 5 } ;\nreturn { topic: \"i_1300_1304\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 760,
        "wires": [
            [
                "0820f3d0a0b2721e"
            ]
        ]
    },
    {
        "id": "aee8f924f8d9a2bc",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Parse Input 1300-1304",
        "func": "let tray = flow.get('tray');\nif (tray == null) return null;\ntray.lowPressure.value     = checkData(msg.payload.data[0], 10);\ntray.suctionGas.value      = checkData(msg.payload.data[1], 10);\ntray.evapTemp.value        = checkData(msg.payload.data[4], 10);\n\nreturn msg;\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 800,
        "wires": [
            [
                "489507fab5c7633c"
            ]
        ]
    },
    {
        "id": "489507fab5c7633c",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Setup Read Input 2001-2063",
        "func": "var modeBusCommand = { 'fc': 0x4, 'unitid': 1, 'address': 2001 , 'quantity': 63 } ;\nreturn { topic: \"i_2001_2063\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 800,
        "wires": [
            [
                "0820f3d0a0b2721e"
            ]
        ]
    },
    {
        "id": "a768236db09f5f6b",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Parse Input 2001-2063",
        "func": "let tray = flow.get('tray');\nif (tray == null) return null;\ntray.defrostTank.value        = checkData(msg.payload.data[0], 10);\ntray.coolIn.value             = checkData(msg.payload.data[1], 10);\ntray.coolOut.value            = checkData(msg.payload.data[2], 10);\ntray.heatIn.value             = checkData(msg.payload.data[3], 10);\ntray.heatOut.value            = checkData(msg.payload.data[4], 10);\ntray.hotGas.value             = checkData(msg.payload.data[5], 10);\ntray.radiatorFeed.value       = checkData(msg.payload.data[6], 10);\ntray.hotWater.value           = checkData(msg.payload.data[7], 10);\ntray.outdoorTemp.value        = checkData(msg.payload.data[8], 10);\ntray.radiatorReturn.value     = checkData(msg.payload.data[9], 10);\ntray.curveSetPoint.value      = checkData(msg.payload.data[29], 10);\ntray.heatBalance.value        = checkData(msg.payload.data[30], 1);\ntray.afterTankSG.value        = checkData(msg.payload.data[59], 100);\ntray.evapFan.value            = checkData(msg.payload.data[60], 100);\ntray.condenserValve.value     = checkData(msg.payload.data[61], 100);\ntray.addHeatSG.value          = checkData(msg.payload.data[62], 100);\n\ntray.opStatus.value = msg.payload.data[53];\nlet aAlarm = msg.payload.data[49]\nlet aArray = getBits(aAlarm);\ntray.aAlarm.value            = aArray[0];\ntray.lowPressGas.value       = aArray[1];\ntray.highPressGas.value      = aArray[2];\ntray.fpCoolIn.value          = aArray[3];\ntray.heatCarryReturnIn.value = aArray[4];\ntray.hotGasHi.value          = aArray[5];\ntray.engineProtect.value     = aArray[6];\ntray.afans.value             = aArray[7];\ntray.masterComm.value        = aArray[8];\ntray.masterKBP.value         = aArray[9];\n\naAlarm = msg.payload.data[51]\naArray = getBits(aAlarm);\ntray.bAlarm.value               = aArray[0];\ntray.hiReturn.value             = aArray[1];\ntray.hiHotGas.value             = aArray[2];\ntray.evapFan1.value             = aArray[3];\ntray.evapFan2.value             = aArray[4];\ntray.lowOutTempStop.value       = aArray[5];\ntray.battery.value              = aArray[6];\ntray.aftCartridgeFuse.value     = aArray[7];\ntray.extPumpFuse.value          = aArray[8];\ntray.extAlarmB1.value           = aArray[9];\ntray.extAlarmB2.value           = aArray[10];\n\naArray = getBits(tray.opStatus.value);\ntray.compressor.value           = aArray[0];\ntray.coolantPump.value          = aArray[1];\ntray.defrostActive.value        = aArray[2];\ntray.heatCarrierPump.value      = aArray[3];\ntray.hotWaterDiverter.value     = aArray[4];\ntray.addHeat.value              = aArray[5];\ntray.radiatorPump.value         = aArray[6];\n\ntray.watchdog.value = tray.watchdog.value + 1;\nif (tray.watchdog.value > 32760) tray.watchdog.value = 0;\ntray.timeStamp = new Date().getTime();\n\nreturn {topic:'newData',payload:true};\nfunction checkData(rawVal,resolution)\n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}\nfunction getBits(alarmNumber)\n{\n    let base2 = alarmNumber.toString(2);\n    let upBase2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (let ii = 0; ii < base2.length; ++ii) \n    {\n        upBase2[ii] = Number(base2[base2.length - ii - 1]);\n    }\n    return upBase2;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 840,
        "wires": [
            [
                "99fbe8135d0ce161"
            ]
        ]
    },
    {
        "id": "742a890ac8fe3017",
        "type": "switch",
        "z": "b438688e0b293257",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "h_20_117",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "h_202_202",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "h_2032_2054",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "i_1300_1304",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "i_2001_2063",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 790,
        "y": 760,
        "wires": [
            [
                "386db633a1f7401c"
            ],
            [
                "1b248eea812fabd1"
            ],
            [
                "ed94891d3263d8d9"
            ],
            [
                "aee8f924f8d9a2bc"
            ],
            [
                "a768236db09f5f6b"
            ]
        ]
    },
    {
        "id": "0820f3d0a0b2721e",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "Setup Read",
        "mode": "link",
        "links": [
            "03a043caa3e7abbf"
        ],
        "x": 1495,
        "y": 740,
        "wires": []
    },
    {
        "id": "9c84627a90a0bb85",
        "type": "modbus-flex-getter",
        "z": "b438688e0b293257",
        "name": "Read Modbus",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "4a8c3caa0ff9b87d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 620,
        "y": 760,
        "wires": [
            [],
            [
                "742a890ac8fe3017"
            ]
        ]
    },
    {
        "id": "bfb2ae23375de0ae",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Setup Read Holding 20-136",
        "func": "if (flow.get('settingInProgress')) return null;\nvar modeBusCommand = { 'fc': 0x3, 'unitid': 1, 'address': 20 , 'quantity': 117 } ;\nreturn {topic: \"h_20_117\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 760,
        "wires": [
            [
                "9c84627a90a0bb85"
            ]
        ]
    },
    {
        "id": "03a043caa3e7abbf",
        "type": "link in",
        "z": "b438688e0b293257",
        "name": "Read Modbus",
        "links": [
            "0820f3d0a0b2721e"
        ],
        "x": 505,
        "y": 820,
        "wires": [
            [
                "9c84627a90a0bb85"
            ]
        ]
    },
    {
        "id": "3744a97333f32473",
        "type": "delay",
        "z": "b438688e0b293257",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1130,
        "y": 200,
        "wires": [
            [
                "4402bc5ad5b005a3"
            ]
        ]
    },
    {
        "id": "4402bc5ad5b005a3",
        "type": "modbus-flex-write",
        "z": "b438688e0b293257",
        "name": "Set Modbus",
        "showStatusActivities": false,
        "showErrors": false,
        "server": "4a8c3caa0ff9b87d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1290,
        "y": 200,
        "wires": [
            [],
            [
                "3f594171d5aa07ab"
            ]
        ]
    },
    {
        "id": "184fe4c567bcfc8d",
        "type": "link out",
        "z": "b438688e0b293257",
        "name": "Check Modbus Setting out",
        "mode": "link",
        "links": [
            "45a97566b65c65cc",
            "04d132d87ffeb91a",
            "e90864c178e3c08e"
        ],
        "x": 1665,
        "y": 200,
        "wires": []
    },
    {
        "id": "3f594171d5aa07ab",
        "type": "function",
        "z": "b438688e0b293257",
        "name": "Check Modbus Setting",
        "func": "flow.set('settingInProgress',false);\nlet tray = flow.get('tray');\nif (tray == null) return null;\n\nswitch(msg.payload.address)\n{\n    case 20:\n        tray.startLevelCompressor.value = checkData(msg.payload.value, 1);\n        tray.startLevelCompressor.enabled = 1;\n        break;\n    case 21:\n        tray.stopLevelCompressor.value = checkData(msg.payload.value, 1);\n        tray.stopLevelCompressor.enabled = 1;\n        break;\n    case 22:\n        tray.analogComp0.value = checkData(msg.payload.value, 1);\n        tray.analogComp0.enabled = 1;\n        break;\n    case 23:\n        tray.analogComp100.value = checkData(msg.payload.value, 1);\n        tray.analogComp100.enabled = 1;\n        break;\n    case 24:\n        tray.startLevelTillsats.value = checkData(msg.payload.value, 1);\n        tray.startLevelTillsats.enabled = 1;\n        break;\n    case 30:\n        tray.startTempHeatIn.value = checkData(msg.payload.value, 10);\n        tray.startTempHeatIn.enabled = 1;\n        break;\n    case 31:\n        tray.startTempHeatInHy.value = checkData(msg.payload.value, 10);\n        tray.startTempHeatInHy.enabled = 1;\n        break;\n    case 33:\n        tray.startTempHotWater.value = checkData(msg.payload.value, 10);\n        tray.startTempHotWater.enabled = 1;\n        break;\n    case 34:\n        tray.startTempHotWaterHy.value = checkData(msg.payload.value, 10);\n        tray.startTempHotWaterHy.enabled = 1;\n        break;\n    case 36:\n        tray.solenoidSet.value = checkData(msg.payload.value, 10);\n        tray.solenoidSet.enabled = 1;\n        break;\n    case 37:\n        tray.solenoidStop.value = checkData(msg.payload.value, 10);\n        tray.solenoidStop.enabled = 1;\n        break;\n    case 40:\n        tray.curve0C.value = checkData(msg.payload.value, 10);\n        tray.curve0C.enabled = 1;\n        break;\n    case 41:\n        tray.curve20C.value = checkData(msg.payload.value, 10);\n        tray.curve20C.enabled = 1;\n        break;\n    case 45:\n        tray.summerDownDelay.value = checkData(msg.payload.value, 1);\n        tray.summerDownDelay.enabled = 1;\n        break;\n    case 46:\n        tray.summStopTemp.value = checkData(msg.payload.value, 10);\n        tray.summStopTemp.enabled = 1;\n        break;\n    case 48:\n        tray.minBegrIntro.value = checkData(msg.payload.value, 10);\n        tray.minBegrIntro.enabled = 1;\n        break;\n    case 49:\n        tray.maxBegrIntro.value = checkData(msg.payload.value, 10);\n        tray.maxBegrIntro.enabled = 1;\n        break;\n    case 51:\n        tray.defrostBlocking.value = checkData(msg.payload.value, 10);\n        tray.defrostBlocking.enabled = 1;\n        break;\n    case 53:\n        tray.defrostLoadTemp.value = checkData(msg.payload.value, 10);\n        tray.defrostLoadTemp.enabled = 1;\n        break;\n    case 54:\n        tray.outTempBlock.value = checkData(msg.payload.value, 10);\n        tray.outTempBlock.enabled = 1;\n        break;\n    case 120:\n        tray.fanSet.value = checkData(msg.payload.value, 1);\n        tray.fanSet.enabled = 1;\n        break;\n    case 124:\n        tray.fanMax.value = checkData(msg.payload.value, 10);\n        tray.fanMax.enabled = 1;\n        break;\n    case 133:\n        tray.LB3ValveMax.value = checkData(msg.payload.value, 10);\n        tray.LB3ValveMax.enabled = 1;\n        break;\n    case 134:\n        tray.LB3ValveSet.value = checkData(msg.payload.value, 10);\n        tray.LB3ValveSet.enabled = 1;\n        break;\n    case 136:\n        tray.LB3ValveDelay.value = checkData(msg.payload.value, 1);\n        tray.LB3ValveDelay.enabled = 1;\n        break;\n    case 202:\n        tray.defrostMaxTime.value = checkData(msg.payload.value, 1);\n        tray.defrostMaxTime.enabled = 1;\n        break;\n    case 2032:\n        tray.extSetpoint.value = checkData(msg.payload.value, 10);\n        tray.extSetpoint.enabled = 1;\n        break;\n    case 2033:\n        tray.extOutsideTemp.value = checkData(msg.payload.value, 10);\n        tray.extOutsideTemp.enabled = 1;\n        break;\n    case 2054:\n        tray.externalBlocking.value = checkData(msg.payload.value, 1);\n        tray.externalBlocking.enabled = 1;\n        break;\n    default:\n        break;\n}\nreturn {topic:'settingCompleted', payload:true};\nfunction checkData(rawVal, resolution) \n{\n    let newVal = rawVal;\n    if (newVal > 32767) newVal = newVal - 65536;\n    newVal = newVal / resolution;\n    return newVal;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 200,
        "wires": [
            [
                "184fe4c567bcfc8d"
            ]
        ]
    }
]